import { BaseRepository } from '@/utils/api/BaseRepository';
import type { VulnerabilityPolicy, VulnerabilitySearchResult } from './vulnerability_policy.entity';
import type { VulnerabilityPolicyType } from './vulnerability_policy.entity';
import type { DataResponse } from '@/utils/api/responses/DataResponse';
import type { PaginatedResponse } from '@/utils/api/responses/PaginatedResponse';
import type { PaginatedRequestOptions } from '@/utils/api/PaginatedRequestOptions';
import { SortDirection } from '@/utils/api/PaginatedRequestOptions';

export interface CreateVulnerabilityPolicyRequest {
    orgId: string;
    data: {
        name: string;
        description: string;
        type: VulnerabilityPolicyType;
        vulnerabilities: string[];
        default: boolean;
    };
    bearerToken: string;
}

export interface UpdateVulnerabilityPolicyRequest {
    orgId: string;
    policyId: string;
    data: {
        name?: string;
        description?: string;
        type?: VulnerabilityPolicyType;
        vulnerabilities?: string[];
        default?: boolean;
    };
    bearerToken: string;
}

export interface GetVulnerabilityPolicyRequest {
    orgId: string;
    policyId: string;
    bearerToken: string;
}

export interface GetVulnerabilityPoliciesRequest {
    orgId: string;
    bearerToken: string;
    options?: PaginatedRequestOptions;
}

export interface DeleteVulnerabilityPolicyRequest {
    orgId: string;
    policyId: string;
    bearerToken: string;
}

export interface SearchVulnerabilitiesRequest {
    query: string;
    page?: number;
    limit?: number;
    source?: 'NVD' | 'OSV' | 'ALL';
    bearerToken: string;
}

export class VulnerabilityPolicyRepository extends BaseRepository {
    constructor() {
        super();
    }

    /**
     * Create a new vulnerability policy
     */
    async createPolicy(
        request: CreateVulnerabilityPolicyRequest
    ): Promise<DataResponse<{ id: string }>> {
        const url = this.buildUrl(`/org/${request.orgId}/policies/vulnerability_policy`);

        return await this.postRequest<DataResponse<{ id: string }>, typeof request.data>({
            url,
            data: request.data,
            bearerToken: request.bearerToken
        });
    }

    /**
     * Get a specific vulnerability policy
     */
    async getPolicy(
        request: GetVulnerabilityPolicyRequest
    ): Promise<DataResponse<VulnerabilityPolicy>> {
        const url = this.buildUrl(
            `/org/${request.orgId}/policies/vulnerability_policy/${request.policyId}`
        );

        return await this.getRequest<DataResponse<VulnerabilityPolicy>>({
            url,
            bearerToken: request.bearerToken
        });
    }

    /**
     * Get all vulnerability policies for an organization
     */
    async getPolicies(
        request: GetVulnerabilityPoliciesRequest
    ): Promise<PaginatedResponse<VulnerabilityPolicy>> {
        const url = this.buildUrl(`/org/${request.orgId}/policies/vulnerability_policy`);

        // Add pagination parameters as query params
        const queryParams: Record<string, string | number> = {};
        if (request.options?.page !== undefined) {
            queryParams.page = request.options.page;
        }
        if (request.options?.entriesPerPage !== undefined) {
            queryParams.entries_per_page = request.options.entriesPerPage;
        }
        if (request.options?.searchKey) {
            queryParams.search_key = request.options.searchKey;
        }
        if (request.options?.sortBy) {
            queryParams.sort_by = request.options.sortBy;
        }
        if (request.options?.sortDirection) {
            queryParams.sort_direction = request.options.sortDirection;
        }

        return await this.getRequest<PaginatedResponse<VulnerabilityPolicy>>({
            url,
            queryParams,
            bearerToken: request.bearerToken
        });
    }

    /**
     * Update an existing vulnerability policy
     */
    async updatePolicy(request: UpdateVulnerabilityPolicyRequest): Promise<DataResponse<void>> {
        const url = this.buildUrl(
            `/org/${request.orgId}/policies/vulnerability_policy/${request.policyId}`
        );

        return await this.patchRequest<DataResponse<void>, typeof request.data>({
            url,
            data: request.data,
            bearerToken: request.bearerToken
        });
    }

    /**
     * Delete a vulnerability policy
     */
    async deletePolicy(request: DeleteVulnerabilityPolicyRequest): Promise<DataResponse<void>> {
        const url = this.buildUrl(
            `/org/${request.orgId}/policies/vulnerability_policy/${request.policyId}`
        );

        return await this.deleteRequest<DataResponse<void>, undefined>({
            url,
            data: undefined,
            bearerToken: request.bearerToken
        });
    }

    /**
     * Search vulnerabilities in the knowledge database
     */
    async searchVulnerabilities(
        request: SearchVulnerabilitiesRequest
    ): Promise<PaginatedResponse<VulnerabilitySearchResult>> {
        const url = this.buildUrl('/knowledge/vulnerabilities/search');

        const queryParams: Record<string, string | number> = {
            query: request.query
        };

        if (request.page !== undefined) {
            queryParams.page = request.page;
        }
        if (request.limit !== undefined) {
            queryParams.limit = request.limit;
        }
        if (request.source) {
            queryParams.source = request.source;
        }

        return await this.getRequest<PaginatedResponse<VulnerabilitySearchResult>>({
            url,
            queryParams,
            bearerToken: request.bearerToken
        });
    }

    /**
     * Alias for getPolicies - maintains compatibility with existing frontend code
     */
    async getVulnerabilityPolicies(request: {
        orgId: string;
        page: number;
        entries_per_page: number;
        search_key: string;
        bearerToken: string;
        handleBusinessErrors: boolean;
    }): Promise<PaginatedResponse<VulnerabilityPolicy>> {
        return await this.getPolicies({
            orgId: request.orgId,
            bearerToken: request.bearerToken,
            options: {
                page: request.page,
                entriesPerPage: request.entries_per_page,
                searchKey: request.search_key,
                activeFilters: [],
                sortBy: 'created_on',
                sortDirection: SortDirection.DESC
            }
        });
    }
}
